From ae14e643e44b40ffde6b9920163fa80bd7988e93 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Palancher?= <remi-externe.palancher@edf.fr>
Date: Thu, 7 Apr 2022 11:44:01 +0200
Subject: [PATCH 3/3] slurmctld plugin

---
 Makefile.am           |  8 ++++
 configure.ac          | 63 +++++++++++++++++++++++++++
 src/collectd.conf.in  |  3 ++
 src/collectd.conf.pod | 15 +++++++
 src/slurmctld.c       | 99 +++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 188 insertions(+)
 create mode 100644 src/slurmctld.c

diff --git a/Makefile.am b/Makefile.am
index da7d543..19441d0 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -1697,6 +1697,14 @@ sigrok_la_LDFLAGS = $(PLUGIN_LDFLAGS)
 sigrok_la_LIBADD = $(LIBSIGROK_LIBS)
 endif
 
+if BUILD_PLUGIN_SLURMCTLD
+pkglib_LTLIBRARIES += slurmctld.la
+slurmctld_la_SOURCES = slurmctld.c
+slurmctld_la_CFLAGS = $(AM_CFLAGS) $(BUILD_WITH_LIBSLURM_CFLAGS)
+slurmctld_la_LDFLAGS = $(PLUGIN_LDFLAGS) $(BUILD_WITH_LIBSLURM_LDFLAGS)
+slurmctld_la_LIBADD = $(BUILD_WITH_LIBSLURM_LIBS)
+endif
+
 if BUILD_PLUGIN_SLURMD
 pkglib_LTLIBRARIES += slurmd.la
 slurmd_la_SOURCES = slurmd.c
diff --git a/configure.ac b/configure.ac
index 62de854..530dd42 100644
--- a/configure.ac
+++ b/configure.ac
@@ -5310,6 +5310,66 @@ fi
 AM_CONDITIONAL(BUILD_WITH_LIBSSL, test "x$with_libssl" = "xyes")
 # }}}
 
+# --with-libslurm {{{
+with_libslurm_cflags=""
+with_libslurm_ldflags=""
+AC_ARG_WITH(libslurm, [AS_HELP_STRING([--with-libslurm@<:@=PREFIX@:>@], [Path to libslurm.])],
+[
+	if test "x$withval" = "xno"
+	then
+		with_libslurm="no"
+	else
+		with_libslurm="yes"
+		if test "x$withval" != "xyes"
+		then
+			with_libslurm_cflags="-I$withval/include"
+			with_libslurm_ldflags="-L$withval/lib"
+		fi
+	fi
+],[with_libslurm="yes"])
+
+# libslurm headers
+if test "x$with_libslurm" = "xyes"
+then
+	SAVE_CPPFLAGS="$CPPFLAGS"
+	CPPFLAGS="$CPPFLAGS $with_libslurm_cflags"
+
+	AC_CHECK_HEADERS(slurm/slurm.h,
+                         [],
+                         [with_libslurm="no (slurm/slurm.h not found)"])
+
+	CPPFLAGS="$SAVE_CPPFLAGS"
+fi
+
+# libslurm library
+if test "x$with_libslurm" = "xyes"
+then
+	SAVE_CPPFLAGS="$CPPFLAGS"
+	SAVE_LDFLAGS="$LDFLAGS"
+	CPPFLAGS="$CPPFLAGS $with_libslurm_cflags"
+	LDFLAGS="$LDFLAGS $with_libslurm_ldflags"
+
+	AC_CHECK_LIB(slurm, slurm_load_jobs,
+	[
+		AC_DEFINE(HAVE_LIBSLURM, 1, [Define to 1 if you have the slurm library (-lslurm).])
+	],
+	[with_libslurm="no (libslurm not found)"])
+
+	CPPFLAGS="$SAVE_CPPFLAGS"
+	LDFLAGS="$SAVE_LDFLAGS"
+fi
+if test "x$with_libslurm" = "xyes"
+then
+	BUILD_WITH_LIBSLURM_CFLAGS="$with_libslurm_cflags"
+	BUILD_WITH_LIBSLURM_LDFLAGS="$with_libslurm_ldflags"
+	BUILD_WITH_LIBSLURM_LIBS="-lslurm"
+	AC_SUBST(BUILD_WITH_LIBSLURM_CFLAGS)
+	AC_SUBST(BUILD_WITH_LIBSLURM_LDFLAGS)
+	AC_SUBST(BUILD_WITH_LIBSLURM_LIBS)
+fi
+AM_CONDITIONAL(BUILD_WITH_LIBSLURM, test "x$with_libslurm" = "xyes")
+# }}}
+
 # --with-libstatgrab {{{
 AC_ARG_WITH([libstatgrab],
   [AS_HELP_STRING([--with-libstatgrab@<:@=PREFIX@:>@], [Path to libstatgrab.])],
@@ -6890,6 +6950,7 @@ AC_PLUGIN([rrdtool],             [$with_librrd],              [RRDTool output pl
 AC_PLUGIN([sensors],             [$with_libsensors],          [lm_sensors statistics])
 AC_PLUGIN([serial],              [$plugin_serial],            [serial port traffic])
 AC_PLUGIN([sigrok],              [$with_libsigrok],           [sigrok acquisition sources])
+AC_PLUGIN([slurmctld],           [$with_libslurm],            [Slurmctld jobs statistics])
 AC_PLUGIN([slurmd],              [yes],                       [Slurmd jobs statistics])
 AC_PLUGIN([smart],               [$plugin_smart],             [SMART statistics])
 AC_PLUGIN([snmp],                [$with_libnetsnmp],          [SNMP querying plugin])
@@ -7184,6 +7245,7 @@ AC_MSG_RESULT([    librouteros . . . . . $with_librouteros])
 AC_MSG_RESULT([    librrd  . . . . . . . $with_librrd])
 AC_MSG_RESULT([    libsensors  . . . . . $with_libsensors])
 AC_MSG_RESULT([    libsigrok   . . . . . $with_libsigrok])
+AC_MSG_RESULT([    libslurm  . . . . . . $with_libslurm])
 AC_MSG_RESULT([    libssl  . . . . . . . $with_libssl])
 AC_MSG_RESULT([    libstatgrab . . . . . $with_libstatgrab])
 AC_MSG_RESULT([    libtokyotyrant  . . . $with_libtokyotyrant])
@@ -7317,6 +7379,7 @@ AC_MSG_RESULT([    rrdtool . . . . . . . $enable_rrdtool])
 AC_MSG_RESULT([    sensors . . . . . . . $enable_sensors])
 AC_MSG_RESULT([    serial  . . . . . . . $enable_serial])
 AC_MSG_RESULT([    sigrok  . . . . . . . $enable_sigrok])
+AC_MSG_RESULT([    slurmctld . . . . . . $enable_slurmctld])
 AC_MSG_RESULT([    slurmd  . . . . . . . $enable_slurmd])
 AC_MSG_RESULT([    smart . . . . . . . . $enable_smart])
 AC_MSG_RESULT([    snmp  . . . . . . . . $enable_snmp])
diff --git a/src/collectd.conf.in b/src/collectd.conf.in
index 8dbe66f..b7b971a 100644
--- a/src/collectd.conf.in
+++ b/src/collectd.conf.in
@@ -191,6 +191,9 @@
 #@BUILD_PLUGIN_SENSORS_TRUE@LoadPlugin sensors
 #@BUILD_PLUGIN_SERIAL_TRUE@LoadPlugin serial
 #@BUILD_PLUGIN_SIGROK_TRUE@LoadPlugin sigrok
+#@BUILD_PLUGIN_SLURMCTLD_TRUE@<LoadPlugin slurmctld>
+#@BUILD_PLUGIN_SLURMCTLD_TRUE@    Globals true
+#@BUILD_PLUGIN_SLURMCTLD_TRUE@</LoadPlugin>
 #@BUILD_PLUGIN_SLURMD_TRUE@LoadPlugin slurmd
 #@BUILD_PLUGIN_SMART_TRUE@LoadPlugin smart
 #@BUILD_PLUGIN_SNMP_TRUE@LoadPlugin snmp
diff --git a/src/collectd.conf.pod b/src/collectd.conf.pod
index 575e331..5aaa0d8 100644
--- a/src/collectd.conf.pod
+++ b/src/collectd.conf.pod
@@ -8031,6 +8031,21 @@ Default: B<true>
 
 =back
 
+=head2 Plugin C<slurmctld>
+
+The I<slurmctld plugin> uses I<libslurm> to retrieve information from slurmctld
+daemon of Slurm HPC workload manager. It collectd the number of nodes and CPU
+allocated to jobs.
+
+This plugin must be loaded with B<Globals> parameter sets to B<true> since the
+slurm library also loads various plugins with C<dlopen()>.
+
+B<Synopsis:>
+
+  <LoadPlugin slurmctld>
+      Globals true
+  </LoadPlugin>
+
 =head2 Plugin C<snmp>
 
 Since the configuration of the C<snmp plugin> is a little more complicated than
diff --git a/src/slurmctld.c b/src/slurmctld.c
new file mode 100644
index 0000000..774dd36
--- /dev/null
+++ b/src/slurmctld.c
@@ -0,0 +1,99 @@
+/**
+ * collectd - src/slurmctld.c
+ * Copyright (C) 2015       Rémi Palancher
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by the
+ * Free Software Foundation; only version 2 of the License is applicable.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
+ *
+ * Authors:
+ *   Rémi Palancher <remi at rezib.org>
+ **/
+
+#include "collectd.h"
+#include "common.h"
+#include "plugin.h"
+#include "configfile.h"
+
+#include <slurm/slurm.h>
+
+/*
+ * Submit a gauge related to a job number.
+ */
+static void slurmctld_submit_gauge (long unsigned int job_number,
+                          char *type_instance,
+                          gauge_t value)
+{
+  value_list_t vl = VALUE_LIST_INIT;
+  value_t values[1];
+  values[0].gauge = value;
+
+  sstrncpy (vl.host, hostname_g, sizeof (vl.host));
+  sstrncpy (vl.plugin, "slurmctld", sizeof (vl.plugin));
+  ssnprintf(vl.plugin_instance, sizeof(vl.plugin_instance), "job_%lu", job_number);
+  sstrncpy (vl.type, "count", sizeof(vl.type));
+  sstrncpy (vl.type_instance, type_instance, sizeof(vl.type_instance));
+
+  vl.values = values;
+  vl.values_len = 1;
+
+  plugin_dispatch_values (&vl);
+} /* void slurmctld_submit_gauge */
+
+/*
+ * Submit all gauges for a slurm job.
+ */
+static void slurmctld_report_job_info (job_info_t *job)
+{
+  slurmctld_submit_gauge(job->job_id, "nodes", (gauge_t) job->num_nodes);
+  slurmctld_submit_gauge(job->job_id, "cpus", (gauge_t) job->num_cpus);
+} /* void slurmctld_report_job_info */
+
+/*
+ * Send RPC to slurmctld in order to load the list of jobs. Then, it iterates
+ * over the list of currently running jobs to submit their metrics.
+ * Returns 0 on success, -1 on error.
+ */
+static int slurmctld_read (void)
+{
+  job_info_msg_t *job_info_msg = NULL;
+  job_info_t *job = NULL;
+  int i;
+  int errcode = 0;
+
+  errcode = slurm_load_jobs((time_t) NULL, &job_info_msg, 0);
+
+  if (errcode) {
+    ERROR("slurmctld plugin: error during slurm_load_jobs(): %d\n", errcode);
+    slurm_free_job_info_msg(job_info_msg);
+    return errcode;
+  }
+
+  for (i=0; i<job_info_msg->record_count; i++) {
+    job = &(job_info_msg->job_array[i]);
+
+    if ((job->job_state & JOB_STATE_BASE) == JOB_RUNNING)
+      slurmctld_report_job_info(job);
+    else
+      DEBUG("slurmctld plugin: excluding job id: %" PRIu32 " because not "
+            "running: %" PRIu16 "",
+            job->job_id,
+            job->job_state);
+  }
+  slurm_free_job_info_msg(job_info_msg);
+  return (0);
+} /* int slurmctld_read */
+
+void module_register (void)
+{
+  plugin_register_read("slurmctld", slurmctld_read);
+} /* void module_register */
-- 
2.20.1

